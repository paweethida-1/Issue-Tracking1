const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
exports.createRequest = async (req, res) => {
  try {
    const {
      title,
      description,
      department,
      serviceType,
      requestDate,
      imageUrl,
    } = req.body;

    const request = await prisma.serviceRequest.create({
      data: {
        title,
        description,
        department,
        serviceType,
        requestDate: new Date(requestDate),
        imageUrl,
        userId: req.user.userId,
      },
    });

    res.status(201).json(request);
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ error: "Failed to create request", details: error.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin)
exports.getAllRequests = async (req, res) => {
  try {
    const requests = await prisma.serviceRequest.findMany({
      orderBy: { createdAt: "desc" },
    });
    res.json(requests);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch requests" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (by ID) ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á admin ‡πÅ‡∏•‡∏∞ staff ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á user
exports.getRequestById = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId;
    const userRole = req.user.role;

    const request = await prisma.serviceRequest.findUnique({
      where: { id: parseInt(id) },
      include: {
        user: true,               // ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á
        assignedTo: true,         // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
        team: {
          include: {
            user: {
              select: { id: true, name: true, email: true }
            }
          }
        },
      },
    });

    if (!request) return res.status(404).json({ error: "Request not found" });

    // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    if (
      userRole !== "ADMIN" &&
      userRole !== "ADMIN_STAFF" &&
      request.userId !== userId &&
      request.assignedToId !== userId
    ) {
      return res.status(403).json({ error: "Access denied" });
    }

    res.json(request);
  } catch (error) {
    console.error("‚ùå Error fetching request by ID:", error);
    res.status(500).json({ error: "Failed to fetch request" });
  }
};



// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç priority (admin)
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï priority ‡πÅ‡∏•‡∏∞ assigned staff (admin)
// ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î priority + staff
exports.approveRequestAndAssignStaff = async (req, res) => {
  try {
    const { id } = req.params;
    const { priority, staffId } = req.body;
    const adminId = req.user.userId;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!priority || !staffId) {
      return res.status(400).json({ error: "priority ‡πÅ‡∏•‡∏∞ staffId ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ staffId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô STAFF ‡∏´‡∏£‡∏∑‡∏≠ ADMIN_STAFF
    const staff = await prisma.user.findUnique({
      where: { id: staffId },
    });

    if (!staff || !["STAFF", "ADMIN_STAFF"].includes(staff.role)) {
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô STAFF ‡∏´‡∏£‡∏∑‡∏≠ ADMIN_STAFF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    const updated = await prisma.serviceRequest.update({
      where: { id: parseInt(id) },
      data: {
        priority,
        assignedToId: staffId,
        status: "APPROVED",
      },
      include: {
        assignedTo: true,
        user: true,
      },
    });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    await prisma.statusLog.create({
      data: {
        status: "APPROVED",
        serviceRequestId: updated.id,
        actionById: adminId,
      },
    });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    res.json({
      message: "Request approved and assigned to staff successfully",
      request: updated,
    });
  } catch (error) {
    console.error("‚ùå Failed to approve:", error);
    res.status(500).json({ error: "Failed to approve and assign request" });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
exports.addTeamMembers = async (req, res) => {
  try {
    const { id } = req.params; // requestId
    const { members } = req.body;

    if (!Array.isArray(members) || members.length === 0) {
      return res.status(400).json({ error: "Members array is required" });
    }

    await prisma.teamMember.createMany({
      data: members.map((m) => ({
        requestId: parseInt(id),
        userId: m.userId,
        role: m.role,
      })),
      skipDuplicates: true,
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï assignedToId ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const updatedRequest = await prisma.serviceRequest.update({
      where: { id: parseInt(id) },
      data: {
        assignedToId: req.user.userId,
        status: "IN_PROGRESS",
      },
      include: {
        user: true,
        assignedTo: true,
        team: { // ‡∏´‡∏£‡∏∑‡∏≠ teamMembers ‡∏ï‡∏≤‡∏° schema ‡∏à‡∏£‡∏¥‡∏á
          include: { user: true },
        },
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await prisma.statusLog.create({
      data: {
        status: "IN_PROGRESS",
        serviceRequestId: updatedRequest.id,
        actionById: req.user.userId,
      },
    });

    res.json({
      message: "Team members added successfully",
      request: updatedRequest,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to add team members" });
  }
};


exports.completeRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { details, completedImageUrl } = req.body;

    const updated = await prisma.serviceRequest.update({
      where: { id: parseInt(id) },
      data: {
        details,
        completedImageUrl,
        status: "COMPLETED",
      },
      include: {
        user: true,
        assignedTo: true,
        team: {
          include: { user: true },
        },
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await prisma.statusLog.create({
      data: {
        status: "COMPLETED",
        serviceRequestId: updated.id,
        actionById: req.user.userId,
      },
    });

    res.json({ message: "Request completed", request: updated });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to complete request" });
  }
};


// ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
exports.rejectRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const adminId = req.user.userId;

    const updated = await prisma.serviceRequest.update({
      where: { id: parseInt(id) },
      data: {
        status: "REJECTED",
      },
    });

    await prisma.statusLog.create({
      data: {
        status: "REJECTED",
        serviceRequestId: updated.id,
        actionById: adminId,
      },
    });

    res.json({ message: "Request rejected", request: updated });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to reject request" });
  }
};

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
exports.getStatusLogs = async (req, res) => {
  try {
    const { id } = req.params;

    const logs = await prisma.statusLog.findMany({
      where: { serviceRequestId: parseInt(id) },
      include: {
        actionBy: { select: { id: true, name: true, role: true } },
      },
      orderBy: { timestamp: "asc" },
    });

    res.json(logs);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to fetch status logs" });
  }
};

// controllers/request.js

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà assigned ‡πÉ‡∏´‡πâ staff ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
exports.getRequestsAssignedToStaff = async (req, res) => {
  try {
    const staffId = req.user.userId;

    if (!staffId) {
      return res.status(400).json({ error: "Missing staff ID" });
    }

    const requests = await prisma.serviceRequest.findMany({
      where: { assignedToId: staffId },
      include: {
        assignedTo: { select: { name: true } }, // üëà ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
      },
      orderBy: { createdAt: "desc" },
    });

    res.json(requests);
  } catch (error) {
    console.error("Failed to fetch requests assigned to staff:", error);
    res.status(500).json({ error: "Failed to fetch assigned requests" });
  }
};

exports.getMyRequests = async (req, res) => {
  try {
    const userId = req.user.userId;

    const requests = await prisma.serviceRequest.findMany({
      where: {
        userId: Number(userId),
      },
      include: {
        user: true, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á
      },
      orderBy: { createdAt: "desc" },
    });

    res.json(requests);
  } catch (error) {
    console.error("Failed to get my requests:", error);
    res.status(500).json({ error: "Server error" });
  }
};

exports.getMyRequestsAdmin = async (req, res) => {
  try {
    const userId = req.user.userId; // userId ‡∏à‡∏≤‡∏Å middleware authCheck (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö query param)
    // ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏±‡∏ö query param ‡∏à‡∏≤‡∏Å url ‡∏Å‡πá‡πÉ‡∏ä‡πâ req.query.userId

    if (!userId) {
      return res.status(400).json({ error: "User ID is required" });
    }

    const requests = await prisma.serviceRequest.findMany({
      where: {
        userId: Number(userId),
      },
      orderBy: { requestDate: "desc" },
    });

    res.json(requests);
  } catch (error) {
    console.error("Failed to get my requests:", error);
    res.status(500).json({ error: "Server error" });
  }
};

// controllers/request.js
exports.updateAssignment = async (req, res) => {
  try {
    const requestId = Number(req.params.id);
    const { priority, staffId } = req.body;

    if (!priority || !staffId) {
      return res.status(400).json({ error: "Priority ‡πÅ‡∏•‡∏∞ staffId ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    const updatedRequest = await prisma.serviceRequest.update({
      where: { id: requestId },
      data: {
        priority,
        assignedToId: staffId,
      },
      include: {
        user: true,
        assignedTo: true,
      },
    });

    return res.json({ request: updatedRequest });
  } catch (error) {
    console.error("Error in updateAssignment:", error);
    return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// controllers/requestController.js
exports.deleteRequest = async (req, res) => {
  const { id } = req.params;
  const user = req.user;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (user.role !== "ADMIN" && user.role !== "ADMIN_STAFF") {
      return res.status(403).json({ error: "Permission denied" });
    }

    // 1. ‡∏•‡∏ö logs ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö request ‡∏ô‡∏µ‡πâ
    await prisma.statusLog.deleteMany({
      where: {
        serviceRequestId: Number(id),
      },
    });

    // 2. ‡∏•‡∏ö team ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    await prisma.teamMember.deleteMany({
      where: {
        requestId: Number(id),
      },
    });

    // 3. ‡∏•‡∏ö‡∏ï‡∏±‡∏ß request
    await prisma.serviceRequest.delete({
      where: {
        id: Number(id),
      },
    });

    return res.json({ message: "Request deleted" });
  } catch (err) {
    console.error("Delete error:", err);
    return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á" });
  }
};

// routes/users.js ‡∏´‡∏£‡∏∑‡∏≠ controller
exports.getStaffUsers = async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      where: {
        OR: [{ role: "STAFF" }, { role: "ADMIN_STAFF" }],
      },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
      },
    });

    res.json(users);
  } catch (error) {
    console.error("Error fetching staff users:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ staff" });
  }
};
