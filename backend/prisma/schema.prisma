// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  department  String
  employeeId  String    @unique
  email       String    @unique
  password    String
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  actionsTaken  StatusLog[]  @relation("UserActionLogs")

  requests    ServiceRequest[]     @relation("UserRequests")
  assigned  ServiceRequest[]   @relation("StaffAssigned")
  teamMembers TeamMember[]         @relation("TeamUser")
}

model ServiceRequest {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  department    String
  serviceType   String
  requestDate   DateTime
  status        Status    @default(PENDING)
  priority      Priority?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId        Int
  user          User      @relation("UserRequests", fields: [userId], references: [id])
  assignedToId  Int?
  assignedTo    User?     @relation("StaffAssigned", fields: [assignedToId], references: [id])

  logs          StatusLog[]
  team          TeamMember[]
}

model StatusLog {
  id             Int       @id @default(autoincrement())
  status         Status
  timestamp      DateTime  @default(now())
  actionById       Int
  actionBy         User      @relation("UserActionLogs", fields: [actionById], references: [id])

  serviceRequestId Int
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
}

model TeamMember {
  id         Int       @id @default(autoincrement())
  requestId  Int
  userId     Int
  role       TeamRole

  request    ServiceRequest @relation(fields: [requestId], references: [id])
  user       User           @relation("TeamUser", fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  STAFF
  ADMIN_STAFF
}

enum Status {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  REJECTED
  RETURNED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TeamRole {
  LEADER
  MEMBER
}
